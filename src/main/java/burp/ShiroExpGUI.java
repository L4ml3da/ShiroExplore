package burp;

import burp.attackModule.*;
import burp.utils.ShiroExpCfg;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import java.util.HashMap;

public class ShiroExpGUI {
    private JButton GOButton;
    private JTextField targetText;
    private JButton goButton;
    private JTextArea payloadText;
    private JPanel rootPanel;
    private JTextField keyText;
    private JTextField cmdText;
    private JComboBox gadgetBox;
    private JTextField cmdTarget;
    private JButton test;
    private JComboBox attackTypeBox;
    private JTextField rememberMeCookieText;
    private JTextArea replyText;
    private JLabel gadget;
    private JComboBox attackModelBox;
    private JTextField shelladdrText;
    private JButton clearButton;
    private JComboBox echoGadget;

    Timer timer = null;
    Thread exThread = null;

    attackShiro550 shiro550 = null;
    //attackShiro721 shiro721 = null;
    String attackTypeSelected = "";
    public HashMap<ShiroExpCfg.ShiroParams, String> cfgParams = new HashMap<ShiroExpCfg.ShiroParams, String>();

    public void startLogTimer() {
        timer = new Timer(2000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (shiro550 != null) {
                    payloadText.append((shiro550.getLog()));
                    if (!shiro550.tomcatEchoData.isEmpty()) {
                        replyText.setText("");
                        replyText.append(shiro550.tomcatEchoData);
                        shiro550.tomcatEchoData = "";
                    }
                }
                /*
                if (shiro721 != null) {
                    payloadText.append((shiro721.getLog()));
                }
                 */
            }
        });
        timer.setInitialDelay(10000);
        timer.start();
    }

    public void packGUIData() {
        cfgParams.put(ShiroExpCfg.ShiroParams.ATTACK_MODEL, attackModelBox.getSelectedItem().toString());
        cfgParams.put(ShiroExpCfg.ShiroParams.GADGET_TYPE, gadgetBox.getSelectedItem().toString());
        cfgParams.put(ShiroExpCfg.ShiroParams.ECHOGADGET_TYPE, echoGadget.getSelectedItem().toString());
        cfgParams.put(ShiroExpCfg.ShiroParams.TARGET_URL, targetText.getText());
        cfgParams.put(ShiroExpCfg.ShiroParams.SHIRO_KEY, keyText.getText());
        cfgParams.put(ShiroExpCfg.ShiroParams.RUN_COMMAND, cmdText.getText());
        cfgParams.put(ShiroExpCfg.ShiroParams.VALID_REMEMBERME, rememberMeCookieText.getText());
        cfgParams.put(ShiroExpCfg.ShiroParams.SHELL_ADDR, shelladdrText.getText());
    }


    public ShiroExpGUI(IBurpExtenderCallbacks callbacks) {

        $$$setupUI$$$();
        startLogTimer();

        goButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                attackTypeSelected = attackTypeBox.getSelectedItem().toString();
                packGUIData();
                if (attackTypeSelected.contains("550")) {
                    shiro550 = new attackShiro550(attackTypeSelected, cfgParams);
                    exThread = new Thread(shiro550);
                    exThread.start();
                } else if (attackTypeSelected.contains("721")) {
                    //shiro721 = new attackShiro721(attackShiro.attackModel.RCE_SILENT, target, rememberMe_str, gadget_type, command);
                    //exThread = new Thread(shiro721);
                    //exThread.start();
                }

            }
        });
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                payloadText.setText("");
                replyText.setText("");
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(16, 4, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.setMaximumSize(new Dimension(200, 400));
        rootPanel.setMinimumSize(new Dimension(200, 400));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Droid Sans Mono Slashed", Font.BOLD, 36, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Apache Shiro RCE");
        rootPanel.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setAlignmentX(0.0f);
        Font label2Font = this.$$$getFont$$$("DialogInput", Font.BOLD, 22, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Attack Log");
        rootPanel.add(label2, new GridConstraints(14, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        rootPanel.add(spacer3, new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        rootPanel.add(spacer4, new GridConstraints(12, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        rootPanel.add(spacer5, new GridConstraints(13, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        rootPanel.add(spacer6, new GridConstraints(14, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        rootPanel.add(spacer7, new GridConstraints(15, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Command");
        rootPanel.add(label3, new GridConstraints(12, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 5, false));
        goButton = new JButton();
        goButton.setText("GO");
        rootPanel.add(goButton, new GridConstraints(13, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        Font label4Font = this.$$$getFont$$$("DialogInput", Font.BOLD, 22, label4.getFont());
        if (label4Font != null) label4.setFont(label4Font);
        label4.setText("RCE");
        rootPanel.add(label4, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        Font label5Font = this.$$$getFont$$$("DialogInput", Font.BOLD, 22, label5.getFont());
        if (label5Font != null) label5.setFont(label5Font);
        label5.setText("Shiro");
        rootPanel.add(label5, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        Font label6Font = this.$$$getFont$$$("Calibri", Font.ITALIC, 16, label6.getFont());
        if (label6Font != null) label6.setFont(label6Font);
        label6.setText("Authored by Lambda");
        rootPanel.add(label6, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 28, false));
        cmdText = new JTextField();
        rootPanel.add(cmdText, new GridConstraints(12, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(1500, -1), null, 0, false));
        final JLabel label7 = new JLabel();
        Font label7Font = this.$$$getFont$$$(null, -1, -1, label7.getFont());
        if (label7Font != null) label7.setFont(label7Font);
        label7.setText("Attack");
        rootPanel.add(label7, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 4, false));
        attackTypeBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Shiro-550 V1");
        defaultComboBoxModel1.addElement("Shiro-550 V2");
        defaultComboBoxModel1.addElement("Shiro-721");
        attackTypeBox.setModel(defaultComboBoxModel1);
        attackTypeBox.setSelectedIndex(0);
        rootPanel.add(attackTypeBox, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        final JLabel label8 = new JLabel();
        Font label8Font = this.$$$getFont$$$(null, -1, -1, label8.getFont());
        if (label8Font != null) label8.setFont(label8Font);
        label8.setText("Target");
        rootPanel.add(label8, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 4, false));
        targetText = new JTextField();
        rootPanel.add(targetText, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(400, -1), null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("Key");
        rootPanel.add(label9, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 4, false));
        keyText = new JTextField();
        rootPanel.add(keyText, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(1000, -1), null, 0, false));
        gadget = new JLabel();
        gadget.setText("Gadget");
        rootPanel.add(gadget, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 4, false));
        gadgetBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("URLDNS");
        defaultComboBoxModel2.addElement("CommonsBeanutils1");
        defaultComboBoxModel2.addElement("CommonsCollections1");
        defaultComboBoxModel2.addElement("CommonsCollections2");
        defaultComboBoxModel2.addElement("CommonsCollections3");
        defaultComboBoxModel2.addElement("CommonsCollections4");
        defaultComboBoxModel2.addElement("CommonsCollections5");
        defaultComboBoxModel2.addElement("CommonsCollections6");
        defaultComboBoxModel2.addElement("CommonsCollections7");
        defaultComboBoxModel2.addElement("CommonsCollections10");
        defaultComboBoxModel2.addElement("Jdk7u21");
        defaultComboBoxModel2.addElement("Hibernate1");
        defaultComboBoxModel2.addElement("Hibernate2");
        defaultComboBoxModel2.addElement("Spring1");
        defaultComboBoxModel2.addElement("Spring2");
        defaultComboBoxModel2.addElement("Myface1");
        defaultComboBoxModel2.addElement("Myface2");
        defaultComboBoxModel2.addElement("C3P0");
        defaultComboBoxModel2.addElement("Clojure");
        defaultComboBoxModel2.addElement("Fileupload1");
        defaultComboBoxModel2.addElement("Groovy1");
        defaultComboBoxModel2.addElement("BeanShell1");
        defaultComboBoxModel2.addElement("JBossInterceptors1");
        defaultComboBoxModel2.addElement("JSON1");
        defaultComboBoxModel2.addElement("JavassistWeld1");
        defaultComboBoxModel2.addElement("Jython1");
        defaultComboBoxModel2.addElement("MozillaRhino1");
        defaultComboBoxModel2.addElement("MozillaRhino2");
        defaultComboBoxModel2.addElement("ROME");
        defaultComboBoxModel2.addElement("Vaadin1");
        defaultComboBoxModel2.addElement("Wicket1");
        gadgetBox.setModel(defaultComboBoxModel2);
        gadgetBox.setSelectedIndex(0);
        rootPanel.add(gadgetBox, new GridConstraints(7, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("RememberMe");
        rootPanel.add(label10, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 4, false));
        rememberMeCookieText = new JTextField();
        rootPanel.add(rememberMeCookieText, new GridConstraints(6, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(1000, -1), null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("Model");
        rootPanel.add(label11, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 5, false));
        final Spacer spacer8 = new Spacer();
        rootPanel.add(spacer8, new GridConstraints(10, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label12 = new JLabel();
        label12.setAlignmentX(0.0f);
        Font label12Font = this.$$$getFont$$$("DialogInput", Font.BOLD, 22, label12.getFont());
        if (label12Font != null) label12.setFont(label12Font);
        label12.setText("Tomcat Echo");
        rootPanel.add(label12, new GridConstraints(14, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setAutoscrolls(true);
        rootPanel.add(scrollPane1, new GridConstraints(15, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        payloadText = new JTextArea();
        payloadText.setLineWrap(true);
        payloadText.setWrapStyleWord(true);
        scrollPane1.setViewportView(payloadText);
        final JScrollPane scrollPane2 = new JScrollPane();
        scrollPane2.setAutoscrolls(true);
        rootPanel.add(scrollPane2, new GridConstraints(15, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        replyText = new JTextArea();
        replyText.setLineWrap(true);
        replyText.setWrapStyleWord(true);
        scrollPane2.setViewportView(replyText);
        attackModelBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("ValidKeyFoundBySilent");
        defaultComboBoxModel3.addElement("SearchSilentGadget");
        defaultComboBoxModel3.addElement("SearchTomcatEchoGaget");
        defaultComboBoxModel3.addElement("SilentRCE");
        defaultComboBoxModel3.addElement("TomcatEchoRCE");
        defaultComboBoxModel3.addElement("Getshell");
        attackModelBox.setModel(defaultComboBoxModel3);
        attackModelBox.setSelectedIndex(0);
        rootPanel.add(attackModelBox, new GridConstraints(10, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        final JLabel label13 = new JLabel();
        label13.setText("Getshell");
        rootPanel.add(label13, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 5, false));
        shelladdrText = new JTextField();
        shelladdrText.setText("ip:port");
        rootPanel.add(shelladdrText, new GridConstraints(11, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(1500, -1), null, 0, false));
        clearButton = new JButton();
        clearButton.setText("ClearLog");
        rootPanel.add(clearButton, new GridConstraints(13, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        final JLabel label14 = new JLabel();
        label14.setText("EchoGadget");
        rootPanel.add(label14, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 4, false));
        echoGadget = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("CommonsCollections1");
        defaultComboBoxModel4.addElement("CommonsCollections2");
        defaultComboBoxModel4.addElement("CommonsBeanutils1");
        defaultComboBoxModel4.addElement("CommonsBeanutils2");
        defaultComboBoxModel4.addElement("Jdk7u21");
        defaultComboBoxModel4.addElement("Jdk8u20");
        echoGadget.setModel(defaultComboBoxModel4);
        echoGadget.setSelectedIndex(0);
        rootPanel.add(echoGadget, new GridConstraints(8, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }


    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
